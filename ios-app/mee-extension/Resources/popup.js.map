{"version":3,"file":"popup.js","sources":["../../../Extension/store.js","../../../Extension/utils/string.js","../../../Extension/utils/browser.js","../../../Extension/popup.js"],"sourcesContent":["export function openDB() {\n  return indexedDB.open(\"MeeExtensionDB\", 13);\n}\n\nexport function initDB() {\n  const request = openDB();\n\n  request.onupgradeneeded = function (event) {\n    const db = event.target.result;\n    const objectStore = db.createObjectStore(\"domains\", { keyPath: \"domain\" });\n    objectStore.createIndex(\"wellknown\", \"wellknown\", { unique: false });\n    objectStore.createIndex(\"enabled\", \"enabled\", { unique: false });\n    objectStore.createIndex(\"domain\", \"enabled\", { unique: true });\n    db.close();\n  };\n}\n\nexport function addRowToDB(data) {\n  const request = openDB();\n\n  request.onsuccess = function (event) {\n    const db = event.target.result;\n    const transaction = db.transaction([\"domains\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"domains\");\n\n    const request_get = objectStore.get(data.domain);\n\n    request_get.onsuccess = (event) => {\n      const old_data = event.target.result;\n      const new_data =\n        old_data && !old_data.enabled\n          ? {\n              domain: data.domain,\n              wellknown: data.gpc,\n              enabled: false,\n            }\n          : data;\n      const requestUpdate = objectStore.put(new_data);\n      requestUpdate.onerror = (event) => {\n        console.warn(\"requestUpdate error\", event);\n      };\n      requestUpdate.onsuccess = (event) => {\n        console.log(\"requestUpdate onsuccess\", event);\n      };\n    };\n  };\n}\n\nexport function getDisableDomains() {\n  return new Promise((resolve, reject) => {\n    const domains = [];\n    const request = openDB();\n\n    request.onerror = () => {\n      reject(\"Error in openDB\");\n    };\n\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n\n      objectStore.openCursor().onsuccess = (event) => {\n        const cursor = event.target.result;\n        if (cursor) {\n          if (cursor.value.enabled === false) {\n            domains.push(cursor.value.domain);\n          }\n\n          cursor.continue();\n        } else {\n          resolve(domains);\n        }\n      };\n\n      db.close();\n    };\n  });\n}\n\nexport async function getDomainData(parsedDomain) {\n  return new Promise((resolve, reject) => {\n    const request = openDB();\n\n    request.onerror = () => {\n      reject(\"Error in openDB\");\n    };\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n\n      const request_get = objectStore.get(parsedDomain);\n      request_get.onerror = () => {\n        reject(`${parsedDomain} Result: has't been found`);\n      };\n      request_get.onsuccess = (event) => {\n        resolve(event.target.result);\n      };\n\n      db.close();\n    };\n  });\n}\n\nexport async function changeEnableDomain(parsedDomain) {\n  return new Promise((resolve, reject) => {\n    const request = openDB();\n    request.onerror = (event) => {\n      reject(\"Error in openDB\");\n    };\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n      const request_get = objectStore.get(parsedDomain);\n      request_get.onerror = (event) => {\n        db.close();\n        reject(`${parsedDomain} Result: has't been found`);\n      };\n\n      request_get.onsuccess = (event) => {\n        const old_data = event.target.result;\n\n        const new_data = {\n          domain: parsedDomain,\n          wellknown: old_data ? old_data.wellknown : false,\n          enabled: old_data ? !old_data.enabled : false,\n        };\n        const requestUpdate = objectStore.put(new_data);\n        requestUpdate.onerror = (event) => {\n          db.close();\n          reject(\"Error with put data\");\n        };\n        requestUpdate.onsuccess = (event) => {\n          db.close();\n          resolve({ domain: new_data.domain, isEnabled: new_data.enabled });\n        };\n      };\n    };\n  });\n}\n\n","export const getDomainFromUrl = (url) => {\n  const fullUrl = new URL(url);\n  return fullUrl.hostname.replace(\"www.\", \"\");\n};\n\nexport const getRegDomain = (domain) => {\n  return `*://${domain}/*`;\n};\n\nexport const getRegDomains = (domains) => {\n  if (!domains) return undefined;\n  return domains.map((d) => getRegDomain(d));\n};","import { getDomainFromUrl } from \"./string\";\n\nexport const getBrowserInfo = () => {\n  const UA = navigator.userAgent;\n  const isMobile = UA.includes(\"Mobi\");\n\n  if (UA.includes(\"Firefox/\")) return isMobile ? \"Firefox Mobile\" : \"Firefox\";\n  if (UA.includes(\"Chrome/\")) return isMobile ? \"Chrome Mobile\" : \"Chrome\";\n  if (UA.includes(\"Safari/\")) return isMobile ? \"Safari Mobile\" : \"Safari\";\n  return isMobile ? \"Chrome Mobile\" : \"Chrome\";\n};\n\nexport const getCurrentParsedDomain = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n        let tab = tabs[0];\n        const currentUrl = getDomainFromUrl(tab.url);\n        resolve(currentUrl);\n      });\n    } catch (e) {\n      reject();\n    }\n  });\n};\n","import { getDomainData, changeEnableDomain } from \"./store.js\";\nimport { getCurrentParsedDomain } from \"./utils/browser\";\n\nfunction getEnabled(domainData, wellknownData = null) {\n  // return !!domainData.enabled || !!(wellknownData && wellknownData?.gpc);\n  return domainData.enabled;\n}\n\nasync function checkDomain(parsedDomain, wellknownData = null) {\n  try {\n    const domainData = await getDomainData(parsedDomain);\n    const enabled = getEnabled(domainData, wellknownData);\n    document.getElementById(\"slider-domain\").checked = enabled;\n  } catch (error) {\n    console.log(error);\n    document.getElementById(\"slider-domain\").checked = false;\n  }\n}\n\nasync function isExtensionEnabled() {\n  try {\n    const extensionData = await getDomainData(\"meeExtension\");\n    return !extensionData || extensionData.enabled;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\nasync function checkEnabledExtension() {\n  const enabledExtension = await isExtensionEnabled();\n  document.getElementById(\"slider-extension\").checked = enabledExtension;\n  document.getElementById(\"domain-container\").style.display = enabledExtension ? \"flex\" : \"none\";\n}\n\nchrome.runtime.onMessage.addListener(async function (message, _, __) {\n  if (message.msg === \"SEND_WELLKNOWN_TO_POPUP\") {\n    const parsedDomain = await getCurrentParsedDomain();\n    let { domain, wellknownData } = message.data;\n\n    if (domain === parsedDomain) {\n      checkDomain(parsedDomain, wellknownData);\n    }\n  }\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", async (_) => {\n  const parsedDomain = await getCurrentParsedDomain();\n  document.getElementById(\"current-domain\").innerHTML = parsedDomain ? parsedDomain : \"Undefined\";\n\n  chrome.runtime.sendMessage({\n    msg: \"POPUP_LOADED\",\n    data: null,\n  });\n\n  await checkDomain(parsedDomain);\n  await checkEnabledExtension();\n});\n\ndocument.getElementById(\"slider-domain\").addEventListener(\"click\", async (_) => {\n  const parsedDomain = await getCurrentParsedDomain();\n  const update_result = await changeEnableDomain(parsedDomain);\n\n  if (update_result) {\n    chrome.runtime.sendMessage({\n      msg: \"UPDATE_SELECTOR\",\n      mode: update_result.isEnabled ? \"enable\" : \"disable\",\n      domain: update_result.domain,\n    });\n    checkDomain(update_result.domain);\n  }\n});\n\ndocument.getElementById(\"slider-extension\").addEventListener(\"click\", async (_) => {\n  const parsedDomain = await getCurrentParsedDomain();\n  const update_result = await changeEnableDomain(\"meeExtension\");\n\n  if (update_result) {\n    chrome.runtime.sendMessage({\n      msg: \"UPDATE_ENABLED\",\n    });\n    checkDomain(parsedDomain);\n  }\n\n  await checkEnabledExtension();\n});\n"],"names":["openDB","indexedDB","open","async","getDomainData","parsedDomain","Promise","resolve","reject","request","onerror","onsuccess","event","db","target","result","request_get","transaction","objectStore","get","close","changeEnableDomain","old_data","new_data","domain","wellknown","enabled","requestUpdate","put","isEnabled","getCurrentParsedDomain","chrome","tabs","query","active","currentWindow","tab","currentUrl","url","URL","hostname","replace","e","checkDomain","wellknownData","domainData","getEnabled","document","getElementById","checked","error","console","log","checkEnabledExtension","enabledExtension","extensionData","isExtensionEnabled","style","display","runtime","onMessage","addListener","message","_","__","msg","data","addEventListener","innerHTML","sendMessage","update_result","mode"],"mappings":"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"}