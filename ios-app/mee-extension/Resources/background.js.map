{"version":3,"file":"background.js","sources":["../../../Extension/store.js","../../../Extension/utils/string.js","../../../Extension/background.js"],"sourcesContent":["export function openDB() {\n  return indexedDB.open(\"MeeExtensionDB\", 13);\n}\n\nexport function initDB() {\n  const request = openDB();\n\n  request.onupgradeneeded = function (event) {\n    const db = event.target.result;\n    const objectStore = db.createObjectStore(\"domains\", { keyPath: \"domain\" });\n    objectStore.createIndex(\"wellknown\", \"wellknown\", { unique: false });\n    objectStore.createIndex(\"enabled\", \"enabled\", { unique: false });\n    objectStore.createIndex(\"domain\", \"enabled\", { unique: true });\n    db.close();\n  };\n}\n\nexport function addRowToDB(data) {\n  const request = openDB();\n\n  request.onsuccess = function (event) {\n    const db = event.target.result;\n    const transaction = db.transaction([\"domains\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"domains\");\n\n    const request_get = objectStore.get(data.domain);\n\n    request_get.onsuccess = (event) => {\n      const old_data = event.target.result;\n      const new_data =\n        old_data && !old_data.enabled\n          ? {\n              domain: data.domain,\n              wellknown: data.gpc,\n              enabled: false,\n            }\n          : data;\n      const requestUpdate = objectStore.put(new_data);\n      requestUpdate.onerror = (event) => {\n        console.warn(\"requestUpdate error\", event);\n      };\n      requestUpdate.onsuccess = (event) => {\n        console.log(\"requestUpdate onsuccess\", event);\n      };\n    };\n  };\n}\n\nexport function getDisableDomains() {\n  return new Promise((resolve, reject) => {\n    const domains = [];\n    const request = openDB();\n\n    request.onerror = () => {\n      reject(\"Error in openDB\");\n    };\n\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n\n      objectStore.openCursor().onsuccess = (event) => {\n        const cursor = event.target.result;\n        if (cursor) {\n          if (cursor.value.enabled === false) {\n            domains.push(cursor.value.domain);\n          }\n\n          cursor.continue();\n        } else {\n          resolve(domains);\n        }\n      };\n\n      db.close();\n    };\n  });\n}\n\nexport async function getDomainData(parsedDomain) {\n  return new Promise((resolve, reject) => {\n    const request = openDB();\n\n    request.onerror = () => {\n      reject(\"Error in openDB\");\n    };\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n\n      const request_get = objectStore.get(parsedDomain);\n      request_get.onerror = () => {\n        reject(`${parsedDomain} Result: has't been found`);\n      };\n      request_get.onsuccess = (event) => {\n        resolve(event.target.result);\n      };\n\n      db.close();\n    };\n  });\n}\n\nexport async function changeEnableDomain(parsedDomain) {\n  return new Promise((resolve, reject) => {\n    const request = openDB();\n    request.onerror = (event) => {\n      reject(\"Error in openDB\");\n    };\n    request.onsuccess = function (event) {\n      const db = event.target.result;\n      const transaction = db.transaction([\"domains\"], \"readwrite\");\n      const objectStore = transaction.objectStore(\"domains\");\n      const request_get = objectStore.get(parsedDomain);\n      request_get.onerror = (event) => {\n        db.close();\n        reject(`${parsedDomain} Result: has't been found`);\n      };\n\n      request_get.onsuccess = (event) => {\n        const old_data = event.target.result;\n\n        const new_data = {\n          domain: parsedDomain,\n          wellknown: old_data ? old_data.wellknown : false,\n          enabled: old_data ? !old_data.enabled : false,\n        };\n        const requestUpdate = objectStore.put(new_data);\n        requestUpdate.onerror = (event) => {\n          db.close();\n          reject(\"Error with put data\");\n        };\n        requestUpdate.onsuccess = (event) => {\n          db.close();\n          resolve({ domain: new_data.domain, isEnabled: new_data.enabled });\n        };\n      };\n    };\n  });\n}\n\n","export const getDomainFromUrl = (url) => {\n  const fullUrl = new URL(url);\n  return fullUrl.hostname.replace(\"www.\", \"\");\n};\n\nexport const getRegDomain = (domain) => {\n  return `*://${domain}/*`;\n};\n\nexport const getRegDomains = (domains) => {\n  if (!domains) return undefined;\n  return domains.map((d) => getRegDomain(d));\n};","import { initDB, addRowToDB, getDisableDomains, getDomainData } from \"./store.js\";\nimport { getDomainFromUrl, getRegDomain, getRegDomains } from \"./utils/string\";\n\ninitDB();\n\nlet memoryDatabase = [];\nlet extensionDisabled = false;\n\nasync function toggleGPCHeaders(id, domain, mode = \"enable\") {\n  // Safari doesn't give all Resources from type, so we need writing this array by hand\n  const allResourceTypes =\n    import.meta.env.VITE_BROWSER === \"safari\"\n      ? [\n          \"font\",\n          \"image\",\n          \"main_frame\",\n          \"media\",\n          \"ping\",\n          \"script\",\n          \"stylesheet\",\n          \"sub_frame\",\n          \"websocket\",\n          \"xmlhttprequest\",\n        ]\n      : Object.values(chrome.declarativeNetRequest.ResourceType);\n\n  const headers =\n    mode === \"remove\"\n      ? [\n          {\n            header: \"Sec-GPC\",\n            operation: \"remove\",\n          },\n          { header: \"DNT\", operation: \"remove\" },\n        ]\n      : [\n          {\n            header: \"Sec-GPC\",\n            operation: \"set\",\n            value: mode === \"enable\" ? \"1\" : \"0\",\n          },\n          { header: \"DNT\", operation: \"set\", value: mode === \"enable\" ? \"1\" : \"0\" },\n        ];\n\n  let UpdateRuleOptions = {\n    addRules: [\n      {\n        id: id,\n        priority: 2,\n        action: {\n          type: \"modifyHeaders\",\n          requestHeaders: headers,\n        },\n        condition: {\n          urlFilter: domain,\n          resourceTypes: allResourceTypes,\n        },\n      },\n    ],\n    removeRuleIds: [id],\n  };\n\n  await chrome.declarativeNetRequest.updateDynamicRules(UpdateRuleOptions);\n}\n\nasync function enableNavigatorGPC(domains = [\"<all_urls>\"]) {\n  try {\n    const disable_domains = await getDisableDomains();\n    await chrome.scripting.updateContentScripts([\n      {\n        id: \"1\",\n        matches: domains,\n        excludeMatches: getRegDomains(disable_domains),\n        js: [\"gpc-scripts/add-gpc-dom.js\"],\n        runAt: \"document_start\",\n      },\n    ]);\n  } catch (error) {\n    console.log(`failed to update content scripts: ${error}`);\n  }\n}\n\nasync function disableNavigatorGPC() {\n  try {\n    const disable_domains = await getDisableDomains();\n    if (disable_domains.length > 0)\n      await chrome.scripting.updateContentScripts([\n        {\n          id: \"1\",\n          matches: getRegDomains(disable_domains),\n          js: [\"gpc-scripts/disable-gpc-dom.js\"],\n          runAt: \"document_start\",\n        },\n      ]);\n  } catch (error) {\n    console.log(`failed to update content scripts: ${error}`);\n  }\n}\n\nasync function deleteAllDynamicRules() {\n  const oldRules = await chrome.declarativeNetRequest.getDynamicRules();\n  const oldRuleIds = oldRules.map((rule) => rule.id);\n\n  oldRuleIds.map(async (id) => {\n    toggleGPCHeaders(id, \"*\", \"remove\");\n  });\n}\n\nasync function addRulesForDisabledDomains() {\n  let id = 1;\n  const disable_domains = await getDisableDomains();\n  if (disable_domains) {\n    memoryDatabase = disable_domains;\n    for (let domain of disable_domains) {\n      await toggleGPCHeaders(id++, getRegDomain(domain), \"disable\");\n    }\n  }\n}\n\nasync function registerRules() {\n  try {\n    const disable_domains = await getDisableDomains();\n    await toggleGPCHeaders(1, \"*\");\n    await addRulesForDisabledDomains();\n    await chrome.scripting.registerContentScripts([\n      {\n        id: \"1\",\n        matches: [\"<all_urls>\"],\n        excludeMatches: getRegDomains(disable_domains),\n        js: [\"gpc-scripts/add-gpc-dom.js\"],\n        runAt: \"document_start\",\n      },\n    ]);\n    await disableNavigatorGPC();\n  } catch (error) {\n    console.log(`failed to register content scripts: ${error}`);\n  }\n}\n\nasync function unregisterRules() {\n  try {\n    const scripts = await chrome.scripting.getRegisteredContentScripts();\n    const scriptIds = scripts.map((script) => script.id);\n    await deleteAllDynamicRules();\n    if (scriptIds.length) await chrome.scripting.unregisterContentScripts({ ids: scriptIds });\n  } catch (error) {\n    console.log(`failed to unregister content scripts: ${error}`);\n  }\n}\n\nfunction afterDownloadWellknown(message, sender) {\n  let tabID = sender.tab.id;\n  let domain = getDomainFromUrl(sender.url);\n  let wellknown = [];\n\n  wellknown[tabID] = message.data;\n  let wellknownData = message.data;\n\n  const gpc = wellknown[tabID] && wellknown[tabID][\"gpc\"] === true ? true : false;\n\n  if (gpc === true) {\n    chrome.action.setIcon({\n      tabId: tabID,\n      path: \"images/icon-96.png\",\n    });\n  }\n\n  addRowToDB({\n    domain: domain,\n    wellknown: gpc,\n    enabled: true,\n  });\n\n  chrome.runtime.onMessage.addListener((message) => {\n    if (message.msg === \"POPUP_LOADED\") {\n      chrome.runtime.sendMessage({\n        msg: \"SEND_WELLKNOWN_TO_POPUP\",\n        data: { domain, wellknownData },\n      });\n    }\n  });\n}\n\nasync function changeExtensionEnabled() {\n  const extensionData = await getDomainData(\"meeExtension\");\n  const enabledExtension = !extensionData || extensionData.enabled;\n  extensionDisabled = !enabledExtension;\n\n  if (enabledExtension) {\n    // if (import.meta.env.VITE_BROWSER !== \"firefox\") {\n    //   console.log(\"On chrome\");\n    //   await addGPCToNavigator();\n    // }\n    // if (import.meta.env.VITE_BROWSER === \"firefox\") {\n    //   console.log(\"On ff\");\n    //   chrome.runtime.sendMessage({ msg: \"ENABLE_DOM\" });\n    // }\n\n    await registerRules();\n  } else {\n    await unregisterRules();\n  }\n}\n\nfunction onCheckEnabledMessageHandled(message, sendResponse) {\n  const isEnabled = memoryDatabase.findIndex((domain) => domain === message.data) === -1 && !extensionDisabled;\n\n  sendResponse({ isEnabled });\n}\n\nfunction onAppCommunicationMessageHandled(message, sendResponse) {\n  new Promise((resolve) => {\n    chrome.runtime.sendNativeMessage(\"Mee\", { type: message.type, message: message.data }, (response) => {\n      resolve(response);\n    });\n  })\n    .then((response) => {\n      sendResponse(response);\n    })\n    .catch((e) => {\n      console.log(\"error: \", e);\n      sendResponse(e);\n    });\n}\n\nchrome.runtime.onInstalled.addListener(async function () {\n  await changeExtensionEnabled();\n});\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  switch (message.msg) {\n    case \"DOWNLOAD_WELLKNOWN\": {\n      afterDownloadWellknown(message, sender);\n      return true;\n    }\n    case \"UPDATE_SELECTOR\": {\n      if (message.mode === \"enable\") {\n        enableNavigatorGPC();\n      } else {\n        disableNavigatorGPC();\n      }\n      toggleGPCHeaders(1, message.domain, message.mode);\n      return true;\n    }\n    case \"UPDATE_ENABLED\": {\n      changeExtensionEnabled();\n      return true;\n    }\n    case \"APP_COMMUNICATION\": {\n      if (import.meta.env.VITE_BROWSER === \"safari\") {\n        onAppCommunicationMessageHandled(message, sendResponse);\n        return true;\n      }\n    }\n    case \"CHECK_ENABLED\": {\n      onCheckEnabledMessageHandled(message, sendResponse);\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n});\n"],"names":["openDB","indexedDB","open","getDisableDomains","Promise","resolve","reject","domains","request","onerror","onsuccess","event","db","target","result","transaction","objectStore","openCursor","cursor","value","enabled","push","domain","continue","close","getRegDomain","getRegDomains","map","d","onupgradeneeded","createObjectStore","keyPath","createIndex","unique","memoryDatabase","extensionDisabled","async","toggleGPCHeaders","id","mode","UpdateRuleOptions","addRules","priority","action","type","requestHeaders","header","operation","condition","urlFilter","resourceTypes","removeRuleIds","chrome","declarativeNetRequest","updateDynamicRules","disableNavigatorGPC","disable_domains","length","scripting","updateContentScripts","matches","js","runAt","error","console","log","registerRules","addRulesForDisabledDomains","registerContentScripts","excludeMatches","unregisterRules","scriptIds","getRegisteredContentScripts","script","getDynamicRules","rule","deleteAllDynamicRules","unregisterContentScripts","ids","afterDownloadWellknown","message","sender","tabID","tab","url","URL","hostname","replace","wellknown","data","wellknownData","gpc","setIcon","tabId","path","get","old_data","new_data","requestUpdate","put","warn","runtime","onMessage","addListener","msg","sendMessage","changeExtensionEnabled","extensionData","parsedDomain","request_get","getDomainData","enabledExtension","onInstalled","sendResponse","sendNativeMessage","response","then","catch","e","onAppCommunicationMessageHandled","isEnabled","findIndex","onCheckEnabledMessageHandled"],"mappings":"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"}